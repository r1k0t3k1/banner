use std::io::{self, Error};

pub type Row = [u8; 9];
pub type Character = [Row; 8];

// None = 0,
// space(fill) = 1,
// ‖ = 2,
// ═ = 3,
// ╗ = 4,
// ╝ = 5,
// ╔ = 6,
// ╚ = 7,


pub const A: Character = [
    [0, 1, 1, 1, 1, 1, 1, 4, 0],
    [1, 1, 6, 3, 3, 3, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 1, 1, 1, 1, 1, 1, 2],
    [1, 1, 6, 3, 3, 3, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [7, 3, 5, 0, 0, 0, 7, 3, 5],
];

pub const B: Character = [
    [1, 1, 1, 1, 1, 1, 1, 4, 0],
    [1, 1, 6, 3, 3, 3, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 1, 1, 1, 1, 1, 1, 2],
    [1, 1, 6, 3, 3, 3, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 1, 1, 1, 1, 1, 6, 5],
    [7, 3, 3, 3, 3, 3, 3, 5, 0],
];

pub const C: Character = [
    [0, 1, 1, 1, 1, 1, 1, 4, 0],
    [1, 1, 6, 3, 3, 3, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 7, 3, 5],
    [1, 1, 2, 0, 0, 0, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [7, 1, 1, 1, 1, 1, 1, 6, 5],
    [0, 7, 3, 3, 3, 3, 3, 5, 0],
];

pub const D: Character = [
    [1, 1, 1, 1, 1, 1, 1, 4, 0],
    [1, 1, 6, 3, 3, 3, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 1, 1, 1, 1, 1, 6, 5],
    [0, 7, 3, 3, 3, 3, 3, 5, 0],
];

pub const E: Character = [
    [1, 1, 1, 1, 1, 1, 1, 1, 4],
    [1, 1, 6, 3, 3, 3, 3, 3, 5],
    [1, 1, 2, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 4, 0],
    [1, 1, 6, 3, 3, 3, 3, 5, 0],
    [1, 1, 2, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 1, 4],
    [7, 3, 3, 3, 3, 3, 3, 3, 5],
];

pub const F: Character = [
    [1, 1, 1, 1, 1, 1, 1, 1, 4],
    [1, 1, 6, 3, 3, 3, 3, 3, 5],
    [1, 1, 2, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 4, 0],
    [1, 1, 6, 3, 3, 3, 3, 5, 0],
    [1, 1, 2, 0, 0, 0, 0, 0, 0],
    [1, 1, 2, 0, 0, 0, 0, 0, 0],
    [7, 3, 5, 0, 0, 0, 0, 0, 0],
];

pub const G: Character = [
    [0, 1, 1, 1, 1, 1, 1, 4, 0],
    [1, 1, 6, 3, 3, 3, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 7, 3, 5],
    [1, 1, 2, 0, 0, 1, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [7, 1, 1, 1, 1, 1, 1, 6, 5],
    [0, 7, 3, 3, 3, 3, 3, 5, 0],
];

pub const H: Character = [
    [1, 1, 4, 0, 0, 0, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 1, 1, 1, 1, 1, 1, 2],
    [1, 1, 6, 3, 3, 3, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [7, 3, 5, 0, 0, 0, 7, 3, 5],
];

pub const I: Character = [
    [1, 1, 1, 1, 1, 1, 1, 1, 4],
    [7, 3, 3, 1, 1, 6, 3, 3, 5],
    [0, 0, 0, 1, 1, 2, 0, 0, 0],
    [0, 0, 0, 1, 1, 2, 0, 0, 0],
    [0, 0, 0, 1, 1, 2, 0, 0, 0],
    [0, 0, 0, 1, 1, 2, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 1, 4],
    [7, 3, 3, 3, 3, 3, 3, 3, 5],
];

pub const J: Character = [
    [0, 0, 0, 0, 0, 0, 1, 1, 4],
    [0, 0, 0, 0, 0, 0, 1, 1, 2],
    [0, 0, 0, 0, 0, 0, 1, 1, 2],
    [0, 0, 0, 0, 0, 0, 1, 1, 2],
    [1, 1, 4, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [7, 1, 1, 1, 1, 1, 1, 6, 5],
    [0, 7, 3, 3, 3, 3, 3, 5, 0],
];

pub const K: Character = [
    [1, 1, 4, 0, 0, 0, 1, 1, 4],
    [1, 1, 2, 0, 0, 1, 1, 6, 5],
    [1, 1, 2, 0, 1, 1, 6, 5, 0],
    [1, 1, 1, 1, 1, 6, 5, 0, 0],
    [1, 1, 6, 3, 1, 1, 4, 0, 0],
    [1, 1, 2, 0, 0, 1, 1, 4, 0],
    [1, 1, 2, 0, 0, 0, 1, 1, 4],
    [7, 3, 5, 0, 0, 0, 7, 3, 5],
];

pub const L: Character = [
    [1, 1, 4, 0, 0, 0, 0, 0, 0],
    [1, 1, 2, 0, 0, 0, 0, 0, 0],
    [1, 1, 2, 0, 0, 0, 0, 0, 0],
    [1, 1, 2, 0, 0, 0, 0, 0, 0],
    [1, 1, 2, 0, 0, 0, 0, 0, 0],
    [1, 1, 2, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 1, 4],
    [7, 3, 3, 3, 3, 3, 3, 3, 5],
];

pub const M: Character = [
    [1, 1, 4, 0, 0, 0, 1, 1, 4],
    [1, 1, 1, 4, 0, 1, 1, 1, 2],
    [1, 1, 1, 1, 1, 1, 1, 1, 2],
    [1, 1, 6, 1, 1, 6, 1, 1, 2],
    [1, 1, 2, 7, 3, 5, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [7, 3, 5, 0, 0, 0, 7, 3, 5],
];

pub const N: Character = [
    [1, 1, 4, 0, 0, 0, 1, 1, 4],
    [1, 1, 1, 4, 0, 0, 1, 1, 2],
    [1, 1, 1, 1, 4, 0, 1, 1, 2],
    [1, 1, 6, 1, 1, 4, 1, 1, 2],
    [1, 1, 2, 7, 1, 1, 1, 1, 2],
    [1, 1, 2, 0, 7, 1, 1, 1, 2],
    [1, 1, 2, 0, 0, 7, 1, 1, 2],
    [7, 3, 5, 0, 0, 0, 7, 3, 5],
];

pub const O: Character = [
    [0, 1, 1, 1, 1, 1, 1, 4, 0],
    [1, 1, 6, 3, 3, 3, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [0, 1, 1, 1, 1, 1, 1, 6, 5],
    [0, 7, 3, 3, 3, 3, 3, 5, 0],
];

pub const P: Character = [
    [1, 1, 1, 1, 1, 1, 1, 4, 0],
    [1, 1, 6, 3, 3, 3, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 1, 1, 1, 1, 1, 6, 5],
    [1, 1, 6, 3, 3, 3, 3, 5, 0],
    [1, 1, 2, 0, 0, 0, 0, 0, 0],
    [1, 1, 2, 0, 0, 0, 0, 0, 0],
    [7, 3, 5, 0, 0, 0, 0, 0, 0],
];

pub const Q: Character = [
    [0, 1, 1, 1, 1, 1, 1, 4, 0],
    [1, 1, 6, 3, 3, 3, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 1, 1, 0, 1, 1, 2],
    [0, 1, 1, 1, 1, 1, 1, 6, 5],
    [0, 7, 3, 3, 1, 1, 3, 5, 0],
];

pub const R: Character = [
    [1, 1, 1, 1, 1, 1, 1, 4, 0],
    [1, 1, 6, 3, 3, 3, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 1, 1, 1, 1, 1, 6, 5],
    [1, 1, 6, 3, 3, 3, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [7, 3, 5, 0, 0, 0, 7, 3, 5],
];

pub const S: Character = [
    [0, 1, 1, 1, 1, 1, 1, 4, 0],
    [1, 1, 6, 3, 3, 3, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 7, 3, 5],
    [0, 1, 1, 1, 1, 1, 1, 4, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 4],
    [1, 1, 4, 0, 0, 0, 1, 1, 2],
    [0, 1, 1, 1, 1, 1, 1, 6, 5],
    [0, 7, 3, 3, 3, 3, 3, 5, 0],
];

pub const T: Character = [
    [1, 1, 1, 1, 1, 1, 1, 1, 4],
    [7, 3, 3, 1, 1, 6, 3, 3, 5],
    [0, 0, 0, 1, 1, 2, 0, 0, 0],
    [0, 0, 0, 1, 1, 2, 0, 0, 0],
    [0, 0, 0, 1, 1, 2, 0, 0, 0],
    [0, 0, 0, 1, 1, 2, 0, 0, 0],
    [0, 0, 0, 1, 1, 2, 0, 0, 0],
    [0, 0, 0, 7, 3, 5, 0, 0, 0],
];

pub const U: Character = [
    [1, 1, 4, 0, 0, 0, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [7, 1, 1, 1, 1, 1, 1, 6, 5],
    [0, 7, 3, 3, 3, 3, 3, 5, 0],
];

pub const V: Character = [
    [1, 1, 4, 0, 0, 0, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [7, 1, 1, 4, 0, 1, 1, 6, 5],
    [0, 7, 1, 1, 1, 1, 6, 5, 0],
    [0, 0, 7, 3, 3, 3, 5, 0, 0],
];

pub const TE: Character = [
    [1, 1, 4, 0, 0, 0, 1, 1, 4],
    [1, 1, 1, 4, 0, 1, 1, 1, 2],
    [1, 1, 1, 1, 1, 1, 1, 1, 2],
    [1, 1, 6, 1, 1, 6, 1, 1, 2],
    [1, 1, 2, 7, 3, 5, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [7, 3, 5, 0, 0, 0, 7, 3, 5],
];

pub const W: Character = [
    [1, 1, 4, 0, 0, 0, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [1, 1, 2, 1, 1, 4, 1, 1, 2],
    [1, 1, 1, 1, 1, 1, 1, 1, 2],
    [1, 1, 1, 6, 3, 1, 1, 1, 2],
    [7, 1, 1, 2, 0, 1, 1, 6, 5],
    [0, 7, 3, 5, 0, 7, 3, 5, 0],
];

pub const X: Character = [
    [1, 1, 4, 0, 0, 0, 1, 1, 4],
    [0, 1, 1, 4, 0, 1, 1, 6, 5],
    [0, 0, 1, 1, 1, 1, 6, 5, 0],
    [0, 0, 0, 1, 1, 6, 5, 0, 0],
    [0, 0, 1, 1, 1, 1, 4, 0, 0],
    [0, 1, 1, 6, 3, 1, 1, 4, 0],
    [1, 1, 6, 5, 0, 0, 1, 1, 4],
    [7, 3, 5, 0, 0, 0, 7, 3, 5],
];

pub const Y: Character = [
    [1, 1, 4, 0, 0, 0, 1, 1, 4],
    [1, 1, 2, 0, 0, 0, 1, 1, 2],
    [0, 1, 1, 4, 0, 1, 1, 6, 5],
    [0, 0, 1, 1, 1, 1, 6, 5, 0],
    [0, 0, 0, 1, 1, 6, 5, 0, 0],
    [0, 0, 0, 1, 1, 2, 0, 0, 0],
    [0, 0, 0, 1, 1, 2, 0, 0, 0],
    [0, 0, 0, 7, 3, 5, 0, 0, 0],
];

pub const Z: Character = [
    [1, 1, 1, 1, 1, 1, 1, 1, 4],
    [7, 3, 3, 3, 3, 1, 1, 6, 5],
    [0, 0, 0, 0, 1, 1, 6, 5, 0],
    [0, 0, 0, 1, 1, 6, 5, 0, 0],
    [0, 0, 1, 1, 6, 5, 0, 0, 0],
    [0, 1, 1, 6, 5, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 1, 4],
    [7, 3, 3, 3, 3, 3, 3, 3, 5],
];
const SPACE: Character = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
];


pub fn string_to_banner_char(s: &str) -> Result<Vec<Character>, io::Error> {
    let up = s.to_ascii_uppercase();
    let mut characters = vec![];
    for c in up.chars() {
        match c {
            'A' => characters.push(A),
            'B' => characters.push(B),
            'C' => characters.push(C),
            'D' => characters.push(D),
            'E' => characters.push(E),
            'F' => characters.push(F),
            'G' => characters.push(G),
            'H' => characters.push(H),
            'I' => characters.push(I),
            'J' => characters.push(J),
            'K' => characters.push(K),
            'L' => characters.push(L),
            'M' => characters.push(M),
            'N' => characters.push(N),
            'O' => characters.push(O),
            'P' => characters.push(P),
            'Q' => characters.push(Q),
            'R' => characters.push(R),
            'S' => characters.push(S),
            'T' => characters.push(T),
            'U' => characters.push(U),
            'V' => characters.push(V),
            'W' => characters.push(W),
            'X' => characters.push(X),
            'Y' => characters.push(Y),
            'Z' => characters.push(Z),
            ' ' => characters.push(SPACE),
            _ => {
                return Err(Error::new(
                    io::ErrorKind::InvalidInput,
                    "Unsupported character",
                ))
            }
        }
    }
    Ok(characters)
}

pub fn render_char(c: &Character) {
    for r in c {
        for ch in r {
            match ch {
                0 => print!(" "),
                1 => print!("\x1b[48;5;255m \x1b[0m"),
                2 => print!("\u{2551}"),
                3 => print!("\u{2550}"),
                4 => print!("\u{2557}"),
                5 => print!("\u{255D}"),
                6 => print!("\u{2554}"),
                7 => print!("\u{255A}"),
                _ => (),
            }
        }
        println!();
    }
}

pub fn render_chars(chars: Vec<Character>) {
    for c in 0..8 {
        for table in chars.iter() {
            let cha = table[c];
            for ch in cha {
                match ch {
                    0 => print!(" "),
                    1 => print!("\x1b[48;5;255m \x1b[0m"),
                    2 => print!("\u{2551}"),
                    3 => print!("\u{2550}"),
                    4 => print!("\u{2557}"),
                    5 => print!("\u{255D}"),
                    6 => print!("\u{2554}"),
                    7 => print!("\u{255A}"),
                    _ => (),
                }
            }
        }
        println!();
    }
}
